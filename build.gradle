plugins {
    id 'java'
}

def props = new Properties()
file("gradle.properties").withInputStream { props.load(it) }

group = 'com.mkso4ka.mindustry.matrixproc'
version = props.getProperty("modVersion", "1.0-SNAPSHOT")

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    mindustryVersion = "v147"
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
}

sourceCompatibility = 17

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url "https://raw.githubusercontent.com/Anuken/Mindustry/mvn-repo/repository" }
}

dependencies {
    compileOnly "com.github.Anuken.Mindustry:core:${mindustryVersion}"
    compileOnly "com.github.Anuken.Arc:arc-core:${mindustryVersion}"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    filesMatching('mod.hjson') {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            VERSION: project.version
        ])
    }
}

jar {
    archiveBaseName = project.name
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Задача для создания classes.dex
task createDex(type: Exec) {
    dependsOn 'jar'
    def d8 = new File(System.getenv("ANDROID_HOME"), "build-tools/${findLatestBuildTools()}/d8" + (isWindows ? ".bat" : ""))
    
    // --- ИСПРАВЛЕНИЕ ЗДЕСЬ ---
    // Указываем d8 на директорию для вывода, а не на сам файл.
    def dexOutputDir = new File(buildDir, "dex")
    
    doFirst {
        // Убеждаемся, что эта директория существует перед запуском d8
        dexOutputDir.mkdirs()
    }

    // Передаем d8 директорию в качестве параметра --output
    commandLine d8, "--release", "--output", dexOutputDir, tasks.jar.archiveFile.get().asFile
}

// Задача для сборки финального JAR
task deploy(type: Jar, dependsOn: createDex) {
    archiveBaseName = "PictureToLogic"
    archiveClassifier = null
    archiveVersion = '' 
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // 1. Включаем ресурсы (mod.hjson)
    from sourceSets.main.resources
    
    // 2. Включаем ресурсы из зависимостей, но не их классы
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it).matching{
        exclude '**/*.class'
    }})

    // 3. Добавляем в корень архива созданный classes.dex
    // Этот код остался без изменений, так как он правильно берет все из папки /build/dex/
    from(new File(buildDir, "dex")) {
        into '/'
    }

    doLast {
        println "Successfully built universal JAR at: ${archiveFile.get().asFile.path}"
    }
}

// Вспомогательная функция для поиска последней версии build-tools
String findLatestBuildTools(){
    def buildTools = new File(System.getenv("ANDROID_HOME"), "build-tools")
    if(!buildTools.exists()) return ""
    // В CI окружении может быть много версий, находим самую свежую стабильную.
    return buildTools.listFiles()
            .collect { it.name }
            .sort()
            .reverse()
            .find { !it.contains("rc") } // Игнорируем release candidates
}