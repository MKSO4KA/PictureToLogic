plugins {
    id 'java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

ext {
    mindustryVersion = "v147"
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
}

group = 'com.mkso4ka.mindustry.matrixproc'
version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url "https://raw.githubusercontent.com/Anuken/Mindustry/mvn-repo/repository" }
    maven { url "https://jitpack.io" }
}

dependencies {
    compileOnly "com.github.Anuken.Mindustry:core:${mindustryVersion}"
    compileOnly "com.github.Anuken.Arc:arc-core:${mindustryVersion}"
}

jar {
    archiveBaseName = "${project.name}-Desktop"
}

task jarAndroid (type: Jar, dependsOn: jar){
    archiveBaseName = "${project.name}-Android"
    from(zipTree(jar.archiveFile))
    doLast{
        def d8 = new File(System.getenv("ANDROID_HOME"), "build-tools/${findLatestBuildTools()}/d8" + (isWindows ? ".bat" : ""))
        exec{
            commandLine d8, "--release", "--output", archiveFile.get().asFile, jar.archiveFile.get().asFile
        }
    }
}

// ИЗМЕНЕНО: Добавляем блок doLast для очистки
task deploy(type: Jar, dependsOn: jarAndroid) {
    archiveBaseName = project.name
    from(zipTree(jar.archiveFile), zipTree(jarAndroid.archiveFile))

    // Этот блок выполнится после создания финального .jar
    // и удалит временные файлы.
    doLast {
        delete(jar.archiveFile)
        delete(jarAndroid.archiveFile)
    }
}

String findLatestBuildTools(){
    def buildTools = new File(System.getenv("ANDROID_HOME"), "build-tools")
    if(!buildTools.exists()) return ""
    return buildTools.listFiles().sort{ a, b ->
        b.name.replace("-preview", ".0").compareTo(a.name.replace("-preview", ".0"))
    }[0].name
}