plugins {
    id 'java'
}

def props = new Properties()
file("gradle.properties").withInputStream { props.load(it) }

group = 'com.mkso4ka.mindustry.matrixproc'
version = props.getProperty("modVersion", "1.0-SNAPSHOT")

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    mindustryVersion = "v147"
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
}

sourceCompatibility = 17

// Репозитории теперь нужны только для Mindustry API
repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url "https://raw.githubusercontent.com/Anuken/Mindustry/mvn-repo/repository" }
}

dependencies {
    compileOnly "com.github.Anuken.Mindustry:core:${mindustryVersion}"
    compileOnly "com.github.Anuken.Arc:arc-core:${mindustryVersion}"
    
    // --- ГЛАВНОЕ ИЗМЕНЕНИЕ: Подключаем все JAR из папки libs ---
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            VERSION: project.version
        ])
    }
}

jar {
    archiveBaseName = project.name + "-Desktop"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task jarAndroid (type: Jar, dependsOn: jar){
    archiveBaseName = project.name + "-Android"
    from(zipTree(jar.archiveFile))
    doLast{
        def d8 = new File(System.getenv("ANDROID_HOME"), "build-tools/${findLatestBuildTools()}/d8" + (isWindows ? ".bat" : ""))
        exec{
            commandLine d8, "--release", "--output", archiveFile.get().asFile, jar.archiveFile.get().asFile
        }
    }
}

task deploy(dependsOn: jarAndroid) {
    doLast {
        def androidJarFile = tasks.jarAndroid.archiveFile.get().asFile
        def finalJarFile = new File(androidJarFile.getParent(), "PictureToLogic.jar")
        delete(tasks.jar.archiveFile.get().asFile)
        if (finalJarFile.exists()) {
            delete(finalJarFile)
        }
        if (!androidJarFile.renameTo(finalJarFile)) {
            throw new GradleException("Could not rename ${androidJarFile} to ${finalJarFile}")
        }
    }
}

String findLatestBuildTools(){
    def buildTools = new File(System.getenv("ANDROID_HOME"), "build-tools")
    if(!buildTools.exists()) return ""
    return buildTools.listFiles().sort{ a, b ->
        b.name.replace("-preview", ".0").compareTo(a.name.replace("-preview", ".0"))
    }[0].name
}
